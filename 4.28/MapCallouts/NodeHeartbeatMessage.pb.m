// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "NodeHeartbeatMessage.pb.h"

@implementation NodeHeartbeatMessageRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [NodeHeartbeatMessageRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface NodeHeartbeatMessage ()
@property int32_t id;
@property NodeHeartbeatMessage_NodeType type;
@property int32_t ipaddress;
@end

@implementation NodeHeartbeatMessage

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value {
  hasId_ = !!value;
}
@synthesize id;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value {
  hasType_ = !!value;
}
@synthesize type;
- (BOOL) hasIpaddress {
  return !!hasIpaddress_;
}
- (void) setHasIpaddress:(BOOL) value {
  hasIpaddress_ = !!value;
}
@synthesize ipaddress;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.id = 0;
    self.type = NodeHeartbeatMessage_NodeTypeRobot;
    self.ipaddress = 0;
  }
  return self;
}
static NodeHeartbeatMessage* defaultNodeHeartbeatMessageInstance = nil;
+ (void) initialize {
  if (self == [NodeHeartbeatMessage class]) {
    defaultNodeHeartbeatMessageInstance = [[NodeHeartbeatMessage alloc] init];
  }
}
+ (NodeHeartbeatMessage*) defaultInstance {
  return defaultNodeHeartbeatMessageInstance;
}
- (NodeHeartbeatMessage*) defaultInstance {
  return defaultNodeHeartbeatMessageInstance;
}
- (BOOL) isInitialized {
  if (!self.hasId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt32:1 value:self.id];
  }
  if (self.hasType) {
    [output writeEnum:2 value:self.type];
  }
  if (self.hasIpaddress) {
    [output writeInt32:3 value:self.ipaddress];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasId) {
    size += computeInt32Size(1, self.id);
  }
  if (self.hasType) {
    size += computeEnumSize(2, self.type);
  }
  if (self.hasIpaddress) {
    size += computeInt32Size(3, self.ipaddress);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (NodeHeartbeatMessage*) parseFromData:(NSData*) data {
  return (NodeHeartbeatMessage*)[[[NodeHeartbeatMessage builder] mergeFromData:data] build];
}
+ (NodeHeartbeatMessage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (NodeHeartbeatMessage*)[[[NodeHeartbeatMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (NodeHeartbeatMessage*) parseFromInputStream:(NSInputStream*) input {
  return (NodeHeartbeatMessage*)[[[NodeHeartbeatMessage builder] mergeFromInputStream:input] build];
}
+ (NodeHeartbeatMessage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (NodeHeartbeatMessage*)[[[NodeHeartbeatMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (NodeHeartbeatMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (NodeHeartbeatMessage*)[[[NodeHeartbeatMessage builder] mergeFromCodedInputStream:input] build];
}
+ (NodeHeartbeatMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (NodeHeartbeatMessage*)[[[NodeHeartbeatMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (NodeHeartbeatMessage_Builder*) builder {
  return [[[NodeHeartbeatMessage_Builder alloc] init] autorelease];
}
+ (NodeHeartbeatMessage_Builder*) builderWithPrototype:(NodeHeartbeatMessage*) prototype {
  return [[NodeHeartbeatMessage builder] mergeFrom:prototype];
}
- (NodeHeartbeatMessage_Builder*) builder {
  return [NodeHeartbeatMessage builder];
}
@end

BOOL NodeHeartbeatMessage_NodeTypeIsValidValue(NodeHeartbeatMessage_NodeType value) {
  switch (value) {
    case NodeHeartbeatMessage_NodeTypeRobot:
    case NodeHeartbeatMessage_NodeTypeTablet:
    case NodeHeartbeatMessage_NodeTypeSmartphone:
      return YES;
    default:
      return NO;
  }
}
@interface NodeHeartbeatMessage_Builder()
@property (retain) NodeHeartbeatMessage* result;
@end

@implementation NodeHeartbeatMessage_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[NodeHeartbeatMessage alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (NodeHeartbeatMessage_Builder*) clear {
  self.result = [[[NodeHeartbeatMessage alloc] init] autorelease];
  return self;
}
- (NodeHeartbeatMessage_Builder*) clone {
  return [NodeHeartbeatMessage builderWithPrototype:result];
}
- (NodeHeartbeatMessage*) defaultInstance {
  return [NodeHeartbeatMessage defaultInstance];
}
- (NodeHeartbeatMessage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (NodeHeartbeatMessage*) buildPartial {
  NodeHeartbeatMessage* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (NodeHeartbeatMessage_Builder*) mergeFrom:(NodeHeartbeatMessage*) other {
  if (other == [NodeHeartbeatMessage defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasIpaddress) {
    [self setIpaddress:other.ipaddress];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (NodeHeartbeatMessage_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (NodeHeartbeatMessage_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt32]];
        break;
      }
      case 16: {
        int32_t value = [input readEnum];
        if (NodeHeartbeatMessage_NodeTypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 24: {
        [self setIpaddress:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (int32_t) id {
  return result.id;
}
- (NodeHeartbeatMessage_Builder*) setId:(int32_t) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (NodeHeartbeatMessage_Builder*) clearId {
  result.hasId = NO;
  result.id = 0;
  return self;
}
- (BOOL) hasType {
  return result.hasType;
}
- (NodeHeartbeatMessage_NodeType) type {
  return result.type;
}
- (NodeHeartbeatMessage_Builder*) setType:(NodeHeartbeatMessage_NodeType) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (NodeHeartbeatMessage_Builder*) clearType {
  result.hasType = NO;
  result.type = NodeHeartbeatMessage_NodeTypeRobot;
  return self;
}
- (BOOL) hasIpaddress {
  return result.hasIpaddress;
}
- (int32_t) ipaddress {
  return result.ipaddress;
}
- (NodeHeartbeatMessage_Builder*) setIpaddress:(int32_t) value {
  result.hasIpaddress = YES;
  result.ipaddress = value;
  return self;
}
- (NodeHeartbeatMessage_Builder*) clearIpaddress {
  result.hasIpaddress = NO;
  result.ipaddress = 0;
  return self;
}
@end

